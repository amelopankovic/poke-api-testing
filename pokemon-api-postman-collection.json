{
	"info": {
		"_postman_id": "7fb21924-9506-44ea-a6da-c0782275f3d6",
		"name": "Pokemon",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "New Folder",
			"item": [
				{
					"name": "Charmander",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"console.log(jsonData.weight)\r",
									"pm.test(\"Name must be Charmander\", () => {\r",
									"    pm.expect(jsonData.name).to.eql(\"charmander\")\r",
									"});\r",
									"for (let i = 0; i < jsonData.types.length; i++){\r",
									"    pm.test(\"Type must be fire\", () => {\r",
									"    pm.expect(jsonData.types[i].type.name).to.include(\"fire\")\r",
									"});}\r",
									"pm.test(\"Weight must be 85\", () => {\r",
									"    pm.expect(jsonData.weight).to.eql(85)\r",
									"});\r",
									"for (let i = 0; i < jsonData.abilities.length; i++){\r",
									"    pm.test(\"Abilities should be blaze and solar-power\", function () {\r",
									"      pm.expect(jsonData.abilities[i].ability.name).to.be.oneOf([\"blaze\", \"solar-power\"]);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Pokemon}}/charmander",
							"host": [
								"{{Pokemon}}"
							],
							"path": [
								"charmander"
							],
							"query": [
								{
									"key": "name",
									"value": "blaze",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Squirtle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"//console.log(jsonData.types);\r",
									"pm.test(\"Name must be Squirtle\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(\"squirtle\");\r",
									"});\r",
									"for (let i = 0; i < jsonData.types.length; i++){\r",
									"    pm.test(\"Type must be water\", () => {\r",
									"    pm.expect(jsonData.types[i].type.name).to.include(\"water\")});\r",
									"}\r",
									"pm.test(\"Weight must be 90\", () => {\r",
									"    pm.expect(jsonData.weight).to.eql(90)\r",
									"});\r",
									"for (let i = 0; i < jsonData.abilities.length; i++){\r",
									"  pm.test(\"Abilities should be torrent and rain-dish\", () => {\r",
									"  pm.expect(jsonData.abilities[i].ability.name).to.be.oneOf([\"torrent\", \"rain-dish\"]);\r",
									"  });\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Pokemon}}/squirtle",
							"host": [
								"{{Pokemon}}"
							],
							"path": [
								"squirtle"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Bulbasaur",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"//console.log(jsonData.types);\r",
									"pm.test(\"Name must be Bulbasaur\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(\"bulbasaur\");\r",
									"});\r",
									"for (let i = 0; i < jsonData.types.length; i++){\r",
									"    pm.test(\"Type must be grass and poison \", () => {\r",
									"    pm.expect(jsonData.types[i].type.name).to.be.oneOf([\"grass\", \"poison\"])\r",
									"});\r",
									"}\r",
									"pm.test(\"Weight must be 69\", () => {\r",
									"    pm.expect(jsonData.weight).to.eql(69)\r",
									"});\r",
									"\r",
									"for (let i = 0; i < jsonData.abilities.length; i++){\r",
									"  pm.test(\"Abilities should be overgrow and chlorophyll\", () => {\r",
									"  pm.expect(jsonData.abilities[i].ability.name).to.be.oneOf([\"overgrow\", \"chlorophyll\"]);\r",
									"  });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Pokemon}}/bulbasaur",
							"host": [
								"{{Pokemon}}"
							],
							"path": [
								"bulbasaur"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "Pokemon",
			"value": "https://pokeapi.co/api/v2/pokemon"
		}
	]
}